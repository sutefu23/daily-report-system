// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーエンティティ
model User {
  id           String   @id @default(cuid()) @db.VarChar(26)
  email        String   @unique @db.VarChar(100)
  username     String   @unique @db.VarChar(50)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  name         String   @db.VarChar(100)
  role         String   @db.VarChar(20) // admin, manager, employee
  departmentId String   @map("department_id") @db.VarChar(26)
  managerId    String?  @map("manager_id") @db.VarChar(26)
  slackUserId  String?  @map("slack_user_id") @db.VarChar(50)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  department    Department      @relation(fields: [departmentId], references: [id])
  manager       User?           @relation("UserManager", fields: [managerId], references: [id])
  subordinates  User[]          @relation("UserManager")
  dailyReports  DailyReport[]
  comments      Comment[]
  notifications Notification[]
  approvedReports DailyReport[] @relation("ApprovedReports")
  rejectedReports DailyReport[] @relation("RejectedReports")

  @@index([email])
  @@index([username])
  @@index([managerId])
  @@index([departmentId])
  @@map("users")
}

// 部門エンティティ
model Department {
  id          String   @id @default(cuid()) @db.VarChar(26)
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users    User[]
  projects Project[]

  @@map("departments")
}

// プロジェクトエンティティ
model Project {
  id           String        @id @default(cuid()) @db.VarChar(26)
  name         String        @db.VarChar(200)
  description  String?       @db.Text
  departmentId String        @map("department_id") @db.VarChar(26)
  status       String        @db.VarChar(20) // planning, active, completed, suspended, cancelled
  startDate    DateTime      @map("start_date") @db.Date
  endDate      DateTime?     @map("end_date") @db.Date
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  department Department @relation(fields: [departmentId], references: [id])
  tasks      Task[]

  @@unique([departmentId, name])
  @@index([departmentId])
  @@index([status])
  @@index([startDate])
  @@map("projects")
}

// 日報エンティティ
model DailyReport {
  id           String              @id @default(cuid()) @db.VarChar(26)
  userId       String              @map("user_id") @db.VarChar(26)
  date         DateTime            @db.Date
  challenges   String              @db.Text
  nextDayPlan  String              @map("next_day_plan") @db.Text
  status       String              @db.VarChar(20) // draft, submitted, approved, rejected
  submittedAt  DateTime?           @map("submitted_at")
  approvedAt   DateTime?           @map("approved_at")
  approvedBy   String?             @map("approved_by") @db.VarChar(26)
  rejectedAt   DateTime?           @map("rejected_at")
  rejectedBy   String?             @map("rejected_by") @db.VarChar(26)
  feedback     String?             @db.Text
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  // Relations
  user         User      @relation(fields: [userId], references: [id])
  approver     User?     @relation("ApprovedReports", fields: [approvedBy], references: [id])
  rejector     User?     @relation("RejectedReports", fields: [rejectedBy], references: [id])
  tasks        Task[]
  comments     Comment[]

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([status])
  @@map("daily_reports")
}

// タスク進捗エンティティ
model Task {
  id            String      @id @default(cuid()) @db.VarChar(26)
  dailyReportId String      @map("daily_report_id") @db.VarChar(26)
  projectId     String      @map("project_id") @db.VarChar(26)
  description   String      @db.Text
  hoursSpent    Float       @map("hours_spent") @db.DoublePrecision
  progress      Int         @db.SmallInt // 0-100の進捗率
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  project     Project     @relation(fields: [projectId], references: [id])

  @@index([dailyReportId])
  @@index([projectId])
  @@map("tasks")
}

// コメントエンティティ
model Comment {
  id            String      @id @default(cuid()) @db.VarChar(26)
  dailyReportId String      @map("daily_report_id") @db.VarChar(26)
  userId        String      @map("user_id") @db.VarChar(26)
  content       String      @db.Text
  isRead        Boolean     @default(false) @map("is_read")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])

  @@index([dailyReportId])
  @@index([userId])
  @@map("comments")
}

// 通知エンティティ
model Notification {
  id                String             @id @default(cuid()) @db.VarChar(26)
  userId            String             @map("user_id") @db.VarChar(26)
  type              String             @db.VarChar(50) // report_submitted, report_approved, report_rejected, comment_added
  title             String             @db.VarChar(200)
  message           String             @db.Text
  relatedEntityId   String?            @map("related_entity_id") @db.VarChar(26)
  relatedEntityType String?            @map("related_entity_type") @db.VarChar(50)
  isRead            Boolean            @default(false) @map("is_read")
  readAt            DateTime?          @map("read_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

